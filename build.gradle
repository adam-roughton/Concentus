import org.gradle.api.tasks.Upload;

import com.sun.tracing.dtrace.ArgsAttributes;

apply plugin: 'base'

ext {
	targetDir = file('target')
	workingDir = file('working')
	configFile = file('config.yaml')
	scripts = file('scripts')
	readmeFile = file('README.md')
	licenceFile = file('LICENCE.txt')
	libDir = file('lib')
}

task makeTargetDir << {
	if (!targetDir.isDirectory()) {
		targetDir.mkdirs()
	}
}

task removeTargetDir(type: Delete) {
	if (targetDir.isDirectory()) {
		delete targetDir
	}
}

task makeWorkingDir << {
	if (!workingDir.isDirectory()) {
		workingDir.mkdirs()
		copy {
			from configFile
			into workingDir
		}
	}
}

task removeWorkingDir(type: Delete) {
	if (workingDir.isDirectory()) {
		delete workingDir
	}
}

clean.dependsOn removeTargetDir, removeWorkingDir

/**
 * Taken from http://gradle.1045684.n5.nabble.com/collecting-only-external-dependency-files-td5117615.html
 * Attribution: Luke Daley
 */
task collectDeps(dependsOn: makeTargetDir, type: Copy) { task ->
	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(':collectDeps')) {
			def projectNames = rootProject.subprojects*.name
			def artifacts = new HashSet()
			subprojects.each { subproject ->
				subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
					def dependency = artifact.moduleVersion.id
					if (!projectNames.contains(dependency.name)) {
						artifacts << artifact.file
					}
				}
			}
			task.from artifacts
		}
	}
	into "$targetDir/dist/lib"
}

task collectLocalDeps(dependsOn: makeTargetDir, type: Copy) {
	from libDir
	into "$targetDir/dist/lib"
}

task createDist(type: Copy) {
	from configFile, scripts, readmeFile, licenceFile
	into "$targetDir/dist"
}
createDist.dependsOn collectDeps, collectLocalDeps

task distZip(dependsOn: createDist, type: Zip) {
	from "$targetDir/dist"
	destinationDir targetDir
	baseName "concentusTestBed"
}

task install(dependsOn:'uploadArchives') << {
	println "$targetDir/dist/lib"
}

def getLocalLib(fileName) {
	new File(libDir.getAbsolutePath(), fileName)
}

allprojects {
	defaultTasks 'build'
	
	group = 'com.adamroughton'
	version = '1.0-SNAPSHOT'
}

subprojects {
	apply plugin: 'java'
	sourceCompatibility = 1.7
	archivesBaseName = 'concentus-' + project.name.toLowerCase() 

	defaultTasks 'build'
	
	repositories {
		mavenCentral()
	}

	dependencies {
		testCompile 'junit:junit:4.5', 'org.mockito:mockito-core:1.9.5', 'com.google.caliper:caliper:1.0-beta-1'
		testCompile 'com.sun.jersey:jersey-core:1.11' // transitive dependency from caliper, though not pulled by gradle due to pom format on jersey-client
	}
	
	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	
	artifacts {
		archives sourcesJar
	}
	
	uploadArchives {
	    repositories {
			flatDir {
				name "target"
				dirs targetDir
			}
		}
	}
	uploadArchives.dependsOn rootProject.makeTargetDir	
	
	task copyArtifactsToDist(type: Copy) { task ->
		configurations.runtime.artifacts.each { artifact ->
			task.from artifact.file
		}
		into "$targetDir/dist"
	}
	copyArtifactsToDist.dependsOn jar, makeTargetDir
	createDist.dependsOn copyArtifactsToDist
}

project(':Core') {
	
	configurations {
		compile.exclude group:'org.slf4j', module:'slf4j-log4j12' // remove sl4j binding
	}
	
	dependencies {
		compile 'com.lmax:disruptor:3.0.1'
		compile 'com.google.guava:guava:14.0'
		compile 'org.zeromq:jzmq:2.2.2'
		compile 'com.esotericsoftware.kryo:kryo:2.20'
		compile 'com.esotericsoftware.minlog:minlog:1.2'
		compile 'com.netflix.curator:curator-recipes:1.3.2' // pulls in zookeeper as well
		compile 'com.netflix.curator:curator-test:1.3.2'
		compile 'commons-cli:commons-cli:1.2'
		compile 'commons-io:commons-io:2.4'
		compile 'it.unimi.dsi:fastutil:6.5.1'
		compile 'org.yaml:snakeyaml:1.11'
		compile 'org.javatuples:javatuples:1.2'
		compile files(getLocalLib('asg.cliche-020310.jar')) // simple interactive shell
		
		runtime 'org.slf4j:slf4j-log4j12:1.7.5'
	}
	
	task runTestZooKeeper(dependsOn: makeWorkingDir, type: JavaExec) {
		main = "com.adamroughton.concentus.cluster.TestZooKeeperProcess"
		classpath = sourceSets.main.runtimeClasspath
		args "50000"
		workingDir rootProject.workingDir
	}
	
	task testJar(type: Jar, dependsOn: testClasses) {
		baseName = "test-${project.archivesBaseName}"
		from sourceSets.test.output
	}
	
	configurations {
		tests
	}
	
	artifacts {
		tests testJar
	}
}

project(':Service') {
	dependencies {
		compile project(':Core')
		testCompile project(path: ':Core', configuration: 'tests')
	}
}

project(':SparkStreamingDriver') {
	apply plugin: 'scala'
	
	// for spark
	repositories {
		maven {
			url "http://repo.typesafe.com/typesafe/releases/"
		}
		maven {
			url "http://repo.spray.cc/"
		}
	}
	
	dependencies {
		compile project(':Service')
		compile ('org.spark-project:spark-streaming_2.9.3:0.7.3') {
			exclude module:'zeromq-scala-binding_2.9.1' // clashes with jzmq
		}
		testCompile project(path: ':Core', configuration: 'tests')
	}
}

project(':CrowdHammer') {
	dependencies {
		compile project(':Service')
		compile 'org.xerial:sqlite-jdbc:3.7.15-M1' // for native mode on mac osx 10.8
		testCompile project(path: ':Core', configuration: 'tests')
	}
	
	def createLocalExecWorkerClosure = { serviceClassName, serviceArgs ->
		{ ->
			javaexec {
				main = "com.adamroughton.concentus.crowdhammer.CrowdHammerWorker"
				classpath = sourceSets.main.runtimeClasspath
				args "-s" + serviceClassName, "-pconfig.yaml", "-a127.0.0.1", "-z127.0.0.1:50000"
				serviceArgs.each { serviceArg ->
					args serviceArg
				} 
				jvmArgs '-Djava.library.path=/usr/local/lib'
				workingDir rootProject.workingDir
			}
		}
	}
	
	task runLocalWorkerService(dependsOn: makeWorkingDir) << {
		createLocalExecWorkerClosure('com.adamroughton.concentus.crowdhammer.worker.WorkerService', ["-n1000"]).call()
	}
	
	task runLocalCoordinator(dependsOn: makeWorkingDir, type: JavaExec) {
		main = "com.adamroughton.concentus.crowdhammer.CrowdHammerCoordinator"
		classpath = sourceSets.main.runtimeClasspath
		args "-pconfig.yaml", "-a127.0.0.1", "-z127.0.0.1:50000"
		jvmArgs '-Djava.library.path=/usr/local/lib'
		workingDir rootProject.workingDir
	}
	
}

project(':Tests') {
	
	// for spark
	repositories {
		maven {
			url "http://repo.typesafe.com/typesafe/releases/"
		}
		maven {
			url "http://repo.spray.cc/"
		}
	}
	
	dependencies {
		compile project(':CrowdHammer')
		compile project(':SparkStreamingDriver')
	}
}